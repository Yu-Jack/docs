name: Testing

on: 
  workflow_dispatch:
    inputs:
      pull_request_number:
        description: 'pull_request_number'
        required: true
      pull_request_title:
        description: 'pull_request_title'
        required: true
  pull_request:

jobs:
  readvault:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: build
      id: build
      run: |
        npm install netlify-cli -g
        mkdir -p build
        echo "Hello, World!" > build/index.html
        netlify deploy --site ${{ secrets.NETLIFY_SITE_ID }} --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} --dir ./build --json > deploy_output.json

        DEPLOY_URL=$(jq -r '.deploy_url' deploy_output.json)
        LOGS_URL=$(jq -r '.logs' deploy_output.json)

        echo "::set-output name=deploy_url::$DEPLOY_URL"
        echo "::set-output name=logs::$LOGS_URL"

    - name: Add or Update PR comment
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const pr_number = `${{ inputs.pull_request_number }}`;
          const deployUrl = `${{ needs.build.outputs.deploy_url }}`;
          const logsUrl = `${{ needs.build.outputs.logs }}`;
          const commentIdentifier = "<!-- deploy-comment -->";
          const body = `${commentIdentifier}\nDeployed successfully!\n\n**Deploy URL:** ${deployUrl}\n**Logs URL:** ${logsUrl}`;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr_number,
          });

          const existingComment = comments.find(comment => comment.body.includes(commentIdentifier));

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: body,
            });
          }